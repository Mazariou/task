const express = require('express');
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { check, validationResult } = require('express-validator');

const router = express.Router();

// Route d'inscription
router.post('/register', [
  check('name', 'Le nom est requis').not().isEmpty(),
  check('email', 'Veuillez entrer un email valide').isEmail(),
  check('password', 'Le mot de passe doit avoir au moins 6 caractères').isLength({ min: 6 })
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  const { name, email, password } = req.body;
  
  try {
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ msg: "L'utilisateur existe déjà" });

    user = new User({ name, email, password });
    await user.save();

    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, { expiresIn: '7d' });

    res.json({ token, user: { id: user.id, name, email } });

  } catch (err) {
    res.status(500).json({ msg: "Erreur serveur" });
  }
});

module.exports = router;
// Route de connexion
router.post('/login', [
    check('email', 'Veuillez entrer un email valide').isEmail(),
    check('password', 'Le mot de passe est requis').exists()
  ], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
  
    const { email, password } = req.body;
    
    try {
      const user = await User.findOne({ email });
      if (!user) return res.status(400).json({ msg: "Identifiants invalides" });
  
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) return res.status(400).json({ msg: "Identifiants invalides" });
  
      const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, { expiresIn: '7d' });
  
      res.json({ token, user: { id: user.id, name: user.name, email } });
  
    } catch (err) {
      res.status(500).json({ msg: "Erreur serveur" });
    }
  });
  
  module.exports = router;
  